componentDidMount(component ilk yüklendiğinde çalışır)
  
  useEffect(() => {
    console.log("tek sefer ve component ilk yüklendiğinde çalışır.");
  }, []);


componentDidUpdate(component içerisinde ki herhangi bir state değiştiğinde çalışır) not : class component'te ilk yüklendiğinde çalışmaz, state değiştiğinde çalışır.

  useEffect(() => {
    console.log("herhangi bir state her değiştiğinde çalışır.component ilk yüklendiğinde de çalışır.");
  });


componentWillUnmount(component ekrandan kaldırılmadan önce çalışır.)

useEffect(() => {
    return () => {
      console.log("unmounted");
    };
  }, []);


------------------------------------------------------------------------------------------------------------

<form onSubmit={(e)=>{
  e.preventDefault(); // bunu yapmazsak form gönderildikten sonra sayfa yenilenir ve veriler kaybolur.
}}></form>


------------------------------------------------------------------------------------------------------------

<div onClick={(e)=>{ console.log("main div tıklandı");}} className="mainClass">

<input onClick={(e)=>{ 
e.stopPropogation(); // bunu yapmazsak her inputa tıklandıgında bunun kapsayıcılarınında onClick metodunu tetikler.
console.log("input tıklandı");

}} />

</div>

------------------------------------------------------------------------------------------------------------

aşağıdaki kullanım react.fragment anlamına gelmektedir.
<>

</>

------------------------------------------------------------------------------------------------------------

memoized : useMemo kullanılırken eğer zaman alacak bir işlem yapılmak istenilirse kullanılır, ilk çalıştığında çalışır ve eğer aynı işlem 
tekrar gelirse tekrar hesaplamaz daha önce hesaplanan sonucu geriye döndürür.

------------------------------------------------------------------------------------------------------------

controlled form : eğer form elemanlarının değerlerini react statelerinde store ediyorsak controlled form olur.


#hooks

  #useState

    const initialValue = () => {
      return 1;
    }

    function App () {

    const [state,setState] = useState(initialValue()); // initial value değerini dışarıdan bir fonksiyon ile alırsak, komponent her render olduğunda initialValue fonksiyonu tekrar çalışır, eğer direk useState içerisine arrow function ile fonksiyon yazarsak yalnız 1 kez çalışır.

    }

  #useRef

  useRef kullanıldığı zaman useRef değişkeni set edildiğinde(veriable.current = "new value") component tekrar render olmuyor.
  ayrıca state'in önceki değerinide tutmak için useRef kullanılabilir.

  #useCallback
   örneğin App isimli komponent içerisinde getListItems isimli bir fonksiyonu (<ListItem items = {getListItems} />) şeklinde child komponente props olarak geçersek,  her App komponenti içerisindeki bir state değiştiğinde getListItems fonksiyonunun referansı değiştiği için ListItem komponentide tekrar render olacak, bunu önlemek için getListItems fonksiyonu useCallback hook'u ile sarmalanır, ve App komponenti yeniden render olduğu zaman getListItems isimli fonksiyonun referansı değişmeyeceği için <ListItem/> componenti tekrar render olmaz.(referential equality)


  #useLayoutEffect

  useEffect asenkron çalışır ve bu yüzden Api call yapmak için en uygun yerdir. useLayoutEffect ise senkron yapıdadır ve tarıyıcı DOM'u paint etmeden araya girer. örneğin dom'daki bir değişikliği direk olarak kullanıcıya yansıtmak istiyorsak kullanılabilir.

  #useTransition

  eğer işlemler arasında öncelik belirlemek istiyorsak düşük öncelikte olan işlemleri useTransition ile sarmalarız, böylece react işlemleri yaparken useTransition ile sarmalanan işlemleri en son çalıştırır bu şekilde kullanıcı ekranda herhangi yavaşlama ve kasma olmadan işlemlerine devam edebilir.

  örnek kullanım;

  const [isPending,startTransition] = useTransition();

  startTransition(()=>{
    işlemler
  });
  
  <Suspense fallback="Loading results...">
        {result}
  </Suspense>
  
  #useDeferredValue
  const deferredText = useDeferredValue(text); 
  
  input value değerine atanan text değeri her değiştiğinde 2 saniye bekler, eğer 2 saniye içinde başka birşey yazılmamış o zaman
  text değerindeki state değişikliğini bildirir.(debounce input event)


