componentDidMount(component ilk yüklendiğinde çalışır)
  
  useEffect(() => {
    console.log("tek sefer ve component ilk yüklendiğinde çalışır.");
  }, []);


componentDidUpdate(component içerisinde ki herhangi bir state değiştiğinde çalışır) not : class component'te ilk yüklendiğinde çalışmaz, state değiştiğinde çalışır.

  useEffect(() => {
    console.log("herhangi bir state her değiştiğinde çalışır.component ilk yüklendiğinde de çalışır.");
  });


componentWillUnmount(component ekrandan kaldırılmadan önce çalışır.)

useEffect(() => {
    return () => {
      console.log("unmounted");
    };
  }, []);


------------------------------------------------------------------------------------------------------------

<form onSubmit={(e)=>{
  e.preventDefault(); // bunu yapmazsak form gönderildikten sonra sayfa yenilenir ve veriler kaybolur.
}}></form>


------------------------------------------------------------------------------------------------------------

<div onClick={(e)=>{ console.log("main div tıklandı");}} className="mainClass">

<input onClick={(e)=>{ 
e.stopPropogation(); // bunu yapmazsak her inputa tıklandıgında bunun kapsayıcılarınında onClick metodunu tetikler.
console.log("input tıklandı");

}} />

</div>

------------------------------------------------------------------------------------------------------------

aşağıdaki kullanım react.fragment anlamına gelmektedir.
<>

</>

------------------------------------------------------------------------------------------------------------

memoized : useMemo kullanılırken eğer zaman alacak bir işlem yapılmak istenilirse kullanılır, ilk çalıştığında çalışır ve eğer aynı işlem 
tekrar gelirse tekrar hesaplamaz daha önce hesaplanan sonucu geriye döndürür.
